generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id         Int          @id @default(autoincrement())
  email      String       @db.VarChar
  password   String       @db.VarChar
  name       String       @db.VarChar
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  blog_posts blog_posts[]
  product    product[]
}

model blog_images {
  id           Int        @id @default(autoincrement())
  blog_post_id Int
  image_url    String     @db.VarChar
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  blog_posts   blog_posts @relation(fields: [blog_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model blog_posts {
  id           Int           @id @default(autoincrement())
  user_id      Int
  title        String        @db.VarChar
  content      String
  images       String?
  created_at   DateTime?     @default(now()) @db.Timestamp(6)
  updated_at   DateTime?     @default(now()) @db.Timestamp(6)
  is_verified  Boolean?      @default(false)
  verified_by  Int?
  is_published Boolean?      @default(false)
  blog_images  blog_images[]
  users        users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  admin        admin?        @relation(fields: [verified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model brands {
  id          Int        @id @default(autoincrement())
  category_id Int
  name        String     @db.VarChar
  logo        String?    @db.VarChar
  status      Boolean?   @default(true)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  models      models[]
  product     product[]
}

model cart {
  id         Int          @id @default(autoincrement())
  user_id    Int
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  users      users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart_items cart_items[]
}

model cart_items {
  id         Int       @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int
  price      String    @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  cart       cart      @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product    product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar
  brands  brands[]
  product product[]
}

model chats {
  id                          Int        @id @default(autoincrement())
  user1_id                    Int
  user2_id                    Int
  created_at                  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at                  DateTime?  @default(now()) @db.Timestamp(6)
  users_chats_user1_idTousers users      @relation("chats_user1_idTousers", fields: [user1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_chats_user2_idTousers users      @relation("chats_user2_idTousers", fields: [user2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages                    messages[]
}

model community_chat {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar
  description             String?
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  community_chat_members  community_chat_members[]
  community_chat_messages community_chat_messages[]
}

model community_chat_members {
  id                Int            @id @default(autoincrement())
  community_chat_id Int
  user_id           Int
  joined_at         DateTime?      @default(now()) @db.Timestamp(6)
  community_chat    community_chat @relation(fields: [community_chat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model community_chat_messages {
  id                Int            @id @default(autoincrement())
  community_chat_id Int
  user_id           Int
  message_text      String
  sent_at           DateTime?      @default(now()) @db.Timestamp(6)
  is_read           Boolean?       @default(false)
  community_chat    community_chat @relation(fields: [community_chat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model components {
  id             Int     @id @default(autoincrement())
  product_id     Int
  wattage        String? @db.VarChar
  socket_type    String? @db.VarChar
  power_supply   String? @db.VarChar
  cooling_system String? @db.VarChar
  form_factor    String? @db.VarChar
  product        product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model favourite_products {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  product    product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model laptops {
  id                Int     @id @default(autoincrement())
  product_id        Int
  ram               String? @db.VarChar
  processor         String? @db.VarChar
  storage           String? @db.VarChar
  graphics          String? @db.VarChar
  ports             String? @db.VarChar
  battery_life      String? @db.VarChar
  screen_size       String? @db.VarChar
  weight            String? @db.VarChar
  screen_resolution String? @db.VarChar
  os                String? @db.VarChar
  processortype     String? @db.VarChar
  color             String? @db.VarChar
  product           product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model messages {
  id           Int       @id @default(autoincrement())
  chat_id      Int
  sender_id    Int
  message_text String
  sent_at      DateTime? @default(now()) @db.Timestamp(6)
  is_read      Boolean?  @default(false)
  chats        chats     @relation(fields: [chat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users     @relation(fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model models {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar
  brand_id Int
  status   Boolean?  @default(true)
  brands   brands    @relation(fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product  product[]
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      String    @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product    product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id               Int            @id @default(autoincrement())
  user_id          Int
  total_amount     String         @db.VarChar
  order_status     String         @db.VarChar
  shipping_address String         @db.VarChar
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  order_items      order_items[]
  users            users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions     transactions[]
}

model personal_computers {
  id            Int     @id @default(autoincrement())
  product_id    Int
  ram           String? @db.VarChar
  processor     String? @db.VarChar
  processortype String? @db.VarChar
  storage       String? @db.VarChar
  graphics      String? @db.VarChar
  ports         String? @db.VarChar
  os            String? @db.VarChar
  product       product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model product {
  id                   Int                  @id @default(autoincrement())
  name                 String               @db.VarChar
  user_id              Int
  description          String               @db.VarChar
  price                String               @db.VarChar
  stock                String               @db.VarChar
  images               String?
  brand_id             Int
  model_id             Int
  category_id          Int
  condition            String?              @db.VarChar
  is_published         Boolean?             @default(false)
  is_verified_by_admin Boolean?             @default(false)
  verified_by          Int?
  created_at           DateTime?            @default(now()) @db.Timestamp(6)
  show_on_home         Boolean?             @default(false)
  top_rated            Boolean?             @default(false)
  cart_items           cart_items[]
  components           components[]
  favourite_products   favourite_products[]
  laptops              laptops[]
  order_items          order_items[]
  personal_computers   personal_computers[]
  brands               brands               @relation(fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categories           categories           @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  models               models               @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                users                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  admin                admin?               @relation(fields: [verified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_images       product_images[]
  review               review[]
}

model product_images {
  id         Int       @id @default(autoincrement())
  product_id Int
  image_url  String    @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamp(6)
  product    product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model review {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  comments   String?   @db.VarChar
  ratings    Int
  images     String?   @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamp(6)
  product    product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model transactions {
  id                 Int       @id @default(autoincrement())
  order_id           Int
  transaction_status String    @db.VarChar
  payment_method     String    @db.VarChar
  payment_amount     String    @db.VarChar
  transaction_date   DateTime? @default(now()) @db.Timestamp(6)
  orders             orders    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                          Int                       @id @default(autoincrement())
  username                    String                    @unique(map: "unique_username") @db.VarChar
  email                       String                    @unique(map: "unique_email") @db.VarChar
  password                    String                    @db.VarChar
  first_name                  String?                   @db.VarChar
  last_name                   String?                   @db.VarChar
  is_seller                   Boolean?                  @default(false)
  is_verified                 Boolean?                  @default(false)
  created_at                  DateTime?                 @default(now()) @db.Timestamp(6)
  phone                       String?                   @db.VarChar(15)
  blog_posts                  blog_posts[]
  cart                        cart[]
  chats_chats_user1_idTousers chats[]                   @relation("chats_user1_idTousers")
  chats_chats_user2_idTousers chats[]                   @relation("chats_user2_idTousers")
  community_chat_members      community_chat_members[]
  community_chat_messages     community_chat_messages[]
  favourite_products          favourite_products[]
  messages                    messages[]
  orders                      orders[]
  product                     product[]
  review                      review[]
  tokens                      tokens[]
}

model tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique(map: "unique_token")
  created_at DateTime? @default(now()) @db.Timestamp(6)
  platform   String
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}
