// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int                @id @default(autoincrement())
  username   String
  email      String             @unique
  password   String
  firstName  String
  lastName   String
  isSeller   Boolean
  isVerified Boolean
  createdAt  DateTime           @default(now())
  products   Product[]
  reviews    Review[]
  favourites FavouriteProduct[]
  carts      Cart[]
  orders     Order[]
  sessions   Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  platform  String
  location  String
  browser   String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model FavouriteProduct {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  userId      Int
  description String
  price       String
  stock       String
  images      ProductImage[]
  brandId     Int
  modelId     Int
  categoryId  Int
  condition   String
  isPublished Boolean
  createdAt   DateTime       @default(now())

  user             User               @relation(fields: [userId], references: [id])
  category         Category           @relation(fields: [categoryId], references: [id])
  brand            Brand              @relation(fields: [brandId], references: [id])
  model            Model              @relation(fields: [modelId], references: [id])
  reviews          Review[]
  favourites       FavouriteProduct[]
  PersonalComputer PersonalComputer[]
  Laptop           Laptop[]
  Component        Component[]
  CartItem         CartItem[]
  OrderItem        OrderItem[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
  brands   Brand[]
}

model PersonalComputer {
  id            Int    @id @default(autoincrement())
  productId     Int
  ram           String
  processor     String
  processorType String
  storage       String
  graphics      String
  ports         String
  os            String

  product Product @relation(fields: [productId], references: [id])
}

model Laptop {
  id               Int    @id @default(autoincrement())
  productId        Int
  ram              String
  processor        String
  storage          String
  graphics         String
  ports            String
  batteryLife      String
  screenSize       String
  weight           String
  screenResolution String
  os               String
  processorType    String
  color            String

  product Product @relation(fields: [productId], references: [id])
}

model Component {
  id            Int    @id @default(autoincrement())
  productId     Int
  wattage       String
  socketType    String
  powerSupply   String
  coolingSystem String
  formFactor    String

  product Product @relation(fields: [productId], references: [id])
}

model Brand {
  id         Int     @id @default(autoincrement())
  categoryId Int
  name       String
  logo       String
  status     Boolean

  category Category  @relation(fields: [categoryId], references: [id])
  products Product[]
  models   Model[]
}

model Model {
  id      Int     @id @default(autoincrement())
  name    String
  brandId Int
  status  Boolean

  brand    Brand     @relation(fields: [brandId], references: [id])
  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  comments  String
  ratings   Int
  images    String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  price     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  totalAmount     String
  orderStatus     String
  shippingAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user         User          @relation(fields: [userId], references: [id])
  items        OrderItem[]
  transactions Transaction[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Transaction {
  id                Int      @id @default(autoincrement())
  orderId           Int
  transactionStatus String
  paymentMethod     String
  paymentAmount     String
  transactionDate   DateTime

  order Order @relation(fields: [orderId], references: [id])
}
