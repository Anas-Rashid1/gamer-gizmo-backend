generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id                                       Int          @id @default(autoincrement())
  email                                    String       @unique(map: "email") @db.VarChar
  password                                 String       @db.VarChar
  name                                     String       @db.VarChar
  created_at                               DateTime?    @default(now()) @db.Timestamp(6)
  type                                     String?      @default("child") @db.VarChar
  blog_posts_blog_posts_admin_idToadmin    blog_posts[] @relation("blog_posts_admin_idToadmin")
  blog_posts_blog_posts_verified_byToadmin blog_posts[] @relation("blog_posts_verified_byToadmin")
  product                                  product[]
}

model blog_images {
  id           Int        @id @default(autoincrement())
  blog_post_id Int
  image_url    String     @db.VarChar
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  blog_posts   blog_posts @relation(fields: [blog_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model blog_posts {
  id                                  Int           @id @default(autoincrement())
  admin_id                            Int
  title                               String        @db.VarChar
  content                             String
  images                              String?
  created_at                          DateTime?     @default(now()) @db.Timestamp(6)
  updated_at                          DateTime?     @default(now()) @db.Timestamp(6)
  is_verified                         Boolean?      @default(true)
  verified_by                         Int?
  is_published                        Boolean?      @default(false)
  tags                                String?
  blog_images                         blog_images[]
  admin_blog_posts_admin_idToadmin    admin         @relation("blog_posts_admin_idToadmin", fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "blog_posts_user_id_fkey")
  admin_blog_posts_verified_byToadmin admin?        @relation("blog_posts_verified_byToadmin", fields: [verified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model brands {
  id          Int        @id @default(autoincrement())
  category_id Int
  name        String     @db.VarChar
  logo        String?    @db.VarChar
  status      Boolean?   @default(true)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  models      models[]
  product     product[]
}

model cart {
  id         Int          @id @default(autoincrement())
  user_id    Int
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  users      users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart_items cart_items[]
}

model cart_items {
  id         Int       @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int
  price      String    @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  cart       cart      @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product    product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar
  brands  brands[]
  product product[]
}

model chats {
  id                          Int        @id @default(autoincrement())
  user1_id                    Int
  user2_id                    Int
  created_at                  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at                  DateTime?  @default(now()) @db.Timestamp(6)
  users_chats_user1_idTousers users      @relation("chats_user1_idTousers", fields: [user1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_chats_user2_idTousers users      @relation("chats_user2_idTousers", fields: [user2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages                    messages[]
}

model community_chat {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar
  description             String?
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  community_chat_members  community_chat_members[]
  community_chat_messages community_chat_messages[]
}

model community_chat_members {
  id                Int            @id @default(autoincrement())
  community_chat_id Int
  user_id           Int
  joined_at         DateTime?      @default(now()) @db.Timestamp(6)
  community_chat    community_chat @relation(fields: [community_chat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model community_chat_messages {
  id                Int            @id @default(autoincrement())
  community_chat_id Int
  user_id           Int
  message_text      String
  sent_at           DateTime?      @default(now()) @db.Timestamp(6)
  is_read           Boolean?       @default(false)
  community_chat    community_chat @relation(fields: [community_chat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model component_type {
  id                                                   Int          @id @default(autoincrement())
  name                                                 String       @db.VarChar
  components_components_component_typeTocomponent_type components[] @relation("components_component_typeTocomponent_type")
}

model components {
  id                                                       Int            @id @default(autoincrement())
  product_id                                               Int
  text                                                     String?        @db.VarChar
  component_type                                           Int
  component_type_components_component_typeTocomponent_type component_type @relation("components_component_typeTocomponent_type", fields: [component_type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "compoenent_type")
  product                                                  product        @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model condition {
  id                                   Int       @id @default(autoincrement())
  created_at                           DateTime  @default(now()) @db.Date
  name                                 String    @db.VarChar
  product_product_conditionTocondition product[] @relation("product_conditionTocondition")
}

model favourite_products {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  product    product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model gaming_console {
  id              Int     @id(map: "gaming_gizmo_pkey") @default(autoincrement())
  product_id      Int
  color           String? @db.VarChar
  accessories     String?
  connectivity    String? @db.VarChar
  warranty_status String? @db.VarChar
  battery_life    String? @db.VarChar
  product         product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "gaming _console_product_id_fkey")
}

model gpu {
  id                                             Int                  @id @default(autoincrement())
  created_at                                     DateTime?            @default(now()) @db.Date
  name                                           String               @db.VarChar
  laptops_laptops_gpuTogpu                       laptops[]            @relation("laptops_gpuTogpu")
  personal_computers_personal_computers_gpuTogpu personal_computers[] @relation("personal_computers_gpuTogpu")
}

model laptops {
  id                                                             Int                @id @default(autoincrement())
  product_id                                                     Int
  graphics                                                       String?            @db.VarChar
  ports                                                          String?            @db.VarChar
  battery_life                                                   String?            @db.VarChar
  screen_size                                                    String?            @db.VarChar
  weight                                                         String?            @db.VarChar
  screen_resolution                                              String?            @db.VarChar
  color                                                          String?            @db.VarChar
  processor                                                      Int?
  processor_variant                                              Int?
  storage                                                        Int?
  storage_type                                                   Int?
  ram                                                            Int?
  gpu                                                            Int?
  gpu_laptops_gpuTogpu                                           gpu?               @relation("laptops_gpuTogpu", fields: [gpu], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "gpu_fk")
  product                                                        product            @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  processors                                                     processors?        @relation(fields: [processor], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "processor_fk")
  processor_variant_laptops_processor_variantToprocessor_variant processor_variant? @relation("laptops_processor_variantToprocessor_variant", fields: [processor_variant], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "processor_variant_fk")
  ram_laptops_ramToram                                           ram?               @relation("laptops_ramToram", fields: [ram], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ram")
  storage_type_laptops_storage_typeTostorage_type                storage_type?      @relation("laptops_storage_typeTostorage_type", fields: [storage_type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "storage_type_fk")
  storage_laptops_storageTostorage                               storage?           @relation("laptops_storageTostorage", fields: [storage], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "stroage_fk")
}

model location {
  id                                 Int       @id @default(autoincrement())
  name                               String    @db.VarChar
  product_product_locationTolocation product[] @relation("product_locationTolocation")
}

model messages {
  id           Int       @id @default(autoincrement())
  chat_id      Int
  sender_id    Int
  message_text String
  sent_at      DateTime? @default(now()) @db.Timestamp(6)
  is_read      Boolean?  @default(false)
  chats        chats     @relation(fields: [chat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users     @relation(fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model models {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar
  brand_id Int
  status   Boolean?  @default(true)
  brands   brands    @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product  product[]
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      String    @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product    product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id               Int            @id @default(autoincrement())
  user_id          Int
  total_amount     String         @db.VarChar
  order_status     String         @db.VarChar
  shipping_address String         @db.VarChar
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  order_items      order_items[]
  users            users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions     transactions[]
}

model personal_computers {
  id                                                                        Int                @id @default(autoincrement())
  product_id                                                                Int
  graphics                                                                  String?            @db.VarChar
  ports                                                                     String?            @db.VarChar
  processor                                                                 Int?
  processor_variant                                                         Int?
  storage                                                                   Int?
  storage_type                                                              Int?
  ram                                                                       Int?
  gpu                                                                       Int?
  gpu_personal_computers_gpuTogpu                                           gpu?               @relation("personal_computers_gpuTogpu", fields: [gpu], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "integer_fk")
  product                                                                   product            @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  processors                                                                processors?        @relation(fields: [processor], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "processor_fk")
  processor_variant_personal_computers_processor_variantToprocessor_variant processor_variant? @relation("personal_computers_processor_variantToprocessor_variant", fields: [processor_variant], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "processor_variant_fk")
  ram_personal_computers_ramToram                                           ram?               @relation("personal_computers_ramToram", fields: [ram], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ram_fk")
  storage_personal_computers_storageTostorage                               storage?           @relation("personal_computers_storageTostorage", fields: [storage], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "stoarge_fk")
  storage_type_personal_computers_storage_typeTostorage_type                storage_type?      @relation("personal_computers_storage_typeTostorage_type", fields: [storage_type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "stoarge_type")
}

model processor_variant {
  id                                                                         Int                  @id @default(autoincrement())
  name                                                                       String?              @db.VarChar
  laptops_laptops_processor_variantToprocessor_variant                       laptops[]            @relation("laptops_processor_variantToprocessor_variant")
  personal_computers_personal_computers_processor_variantToprocessor_variant personal_computers[] @relation("personal_computers_processor_variantToprocessor_variant")
  processors                                                                 processors[]
}

model processors {
  id                 Int                  @id(map: "Processors_pkey") @default(autoincrement())
  name               String?              @db.VarChar
  variant_id         Int
  laptops            laptops[]
  personal_computers personal_computers[]
  processor_variant  processor_variant    @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vraint_fk")
}

model product {
  id                                     Int                    @id @default(autoincrement())
  name                                   String                 @db.VarChar
  user_id                                Int
  description                            String                 @db.VarChar
  price                                  String                 @db.VarChar
  stock                                  String                 @db.VarChar
  brand_id                               Int?
  model_id                               Int?
  category_id                            Int
  is_published                           Boolean?               @default(false)
  is_verified_by_admin                   Boolean?               @default(false)
  verified_by                            Int?
  created_at                             DateTime?              @default(now()) @db.Timestamp(6)
  show_on_home                           Boolean?               @default(false)
  top_rated                              Boolean?               @default(false)
  location                               Int?
  condition                              Int?
  other_brand_name                       String?                @db.VarChar
  cart_items                             cart_items[]
  components                             components[]
  favourite_products                     favourite_products[]
  gaming_console                         gaming_console[]
  laptops                                laptops[]
  order_items                            order_items[]
  personal_computers                     personal_computers[]
  condition_product_conditionTocondition condition?             @relation("product_conditionTocondition", fields: [condition], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "condition_fk")
  location_product_locationTolocation    location?              @relation("product_locationTolocation", fields: [location], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "location_fkry")
  brands                                 brands?                @relation(fields: [brand_id], references: [id], onUpdate: NoAction)
  categories                             categories             @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  models                                 models?                @relation(fields: [model_id], references: [id], onUpdate: NoAction)
  users                                  users                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  admin                                  admin?                 @relation(fields: [verified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_images                         product_images[]
  store_product_review                   store_product_review[]
}

model product_images {
  id         Int       @id @default(autoincrement())
  product_id Int
  image_url  String    @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamp(6)
  product    product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ram {
  id                                             Int                  @id @default(autoincrement())
  name                                           String               @db.VarChar
  created_at                                     DateTime?            @default(now()) @db.Date
  laptops_laptops_ramToram                       laptops[]            @relation("laptops_ramToram")
  personal_computers_personal_computers_ramToram personal_computers[] @relation("personal_computers_ramToram")
}

model storage {
  id                                                     Int                  @id @default(autoincrement())
  created_at                                             DateTime?            @default(now()) @db.Date
  name                                                   String?              @db.VarChar
  laptops_laptops_storageTostorage                       laptops[]            @relation("laptops_storageTostorage")
  personal_computers_personal_computers_storageTostorage personal_computers[] @relation("personal_computers_storageTostorage")
}

model storage_type {
  id                                                               Int                  @id @default(autoincrement())
  created_at                                                       DateTime?            @default(now()) @db.Date
  name                                                             String               @db.VarChar
  laptops_laptops_storage_typeTostorage_type                       laptops[]            @relation("laptops_storage_typeTostorage_type")
  personal_computers_personal_computers_storage_typeTostorage_type personal_computers[] @relation("personal_computers_storage_typeTostorage_type")
}

model store_product_review {
  id                          Int                           @id(map: "review_pkey") @default(autoincrement())
  user_id                     Int
  product_id                  Int
  comments                    String?                       @db.VarChar
  ratings                     Int
  created_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  product                     product                       @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "review_product_id_fkey")
  users                       users                         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "review_user_id_fkey")
  store_product_review_images store_product_review_images[]
}

model store_product_review_images {
  id                   Int                  @id(map: "review_images_pkey") @default(autoincrement())
  review_id            Int
  image_url            String
  created_at           DateTime?            @default(now()) @db.Date
  store_product_review store_product_review @relation(fields: [review_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "review_id_fk")
}

model tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique(map: "unique_token")
  created_at DateTime? @default(now()) @db.Timestamp(6)
  platform   String
  region     String
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model transactions {
  id                 Int       @id @default(autoincrement())
  order_id           Int
  transaction_status String    @db.VarChar
  payment_method     String    @db.VarChar
  payment_amount     String    @db.VarChar
  transaction_date   DateTime? @default(now()) @db.Timestamp(6)
  orders             orders    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_reviews {
  id                                    Int       @id @default(autoincrement())
  reviewer_id                           Int
  reviewee_id                           Int
  ratings                               String    @db.VarChar
  comments                              String?
  created_at                            DateTime? @default(now()) @db.Date
  users_user_reviews_reviewee_idTousers users     @relation("user_reviews_reviewee_idTousers", fields: [reviewee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviewee_fk")
  users_user_reviews_reviewer_idTousers users     @relation("user_reviews_reviewer_idTousers", fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviewers_fk")
}

model users {
  id                                           Int                       @id @default(autoincrement())
  username                                     String                    @unique(map: "unique_username") @db.VarChar
  email                                        String                    @unique(map: "unique_email") @db.VarChar
  password                                     String                    @db.VarChar
  first_name                                   String?                   @db.VarChar
  last_name                                    String?                   @db.VarChar
  is_seller                                    Boolean?                  @default(false)
  is_email_verified                            Boolean?                  @default(false)
  created_at                                   DateTime?                 @default(now()) @db.Timestamp(6)
  phone                                        String?                   @db.VarChar(15)
  is_admin_verified                            Boolean?                  @default(false)
  dob                                          DateTime                  @db.Date
  gender                                       String                    @db.VarChar
  nic_front_image                              String?
  nic_back_image                               String?
  address                                      String?
  profile                                      String?
  applied_for_verification                     Boolean?                  @default(false)
  is_active                                    Boolean?                  @default(true)
  cart                                         cart[]
  chats_chats_user1_idTousers                  chats[]                   @relation("chats_user1_idTousers")
  chats_chats_user2_idTousers                  chats[]                   @relation("chats_user2_idTousers")
  community_chat_members                       community_chat_members[]
  community_chat_messages                      community_chat_messages[]
  favourite_products                           favourite_products[]
  messages                                     messages[]
  orders                                       orders[]
  product                                      product[]
  store_product_review                         store_product_review[]
  tokens                                       tokens[]
  user_reviews_user_reviews_reviewee_idTousers user_reviews[]            @relation("user_reviews_reviewee_idTousers")
  user_reviews_user_reviews_reviewer_idTousers user_reviews[]            @relation("user_reviews_reviewer_idTousers")
}
